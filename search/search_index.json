{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vis\u00e3o geral","text":"<p>A Rede IC fornece o servi\u00e7o de hospedagem de aplica\u00e7\u00f5es web para a comunidade do Instituto de Computa\u00e7\u00e3o, ainda de forma experimental. Neste momento, N\u00c3O realizamos backup dos dados e n\u00e3o hospedamos aplica\u00e7\u00f5es que utilizem intensivamente recursos de processamento ou armazenamento.</p> <p>O servi\u00e7o de hospedagem \u00e9 baseado no Dokku, uma solu\u00e7\u00e3o open source para plataforma como servi\u00e7o (PaaS). O Dokku possibilita que o usu\u00e1rio fa\u00e7a o upload do c\u00f3digo-fonte da aplica\u00e7\u00e3o via Git; o servidor realiza o build da aplica\u00e7\u00e3o e a executa em containers Docker isolados.</p> <p>Para hospedar sua aplica\u00e7\u00e3o web, abra um chamado no Sistema de Suporte do IC, utilizando o t\u00f3pico de ajuda \"Suporte TI: hospedagem de aplica\u00e7\u00e3o\". Ser\u00e1 necess\u00e1rio fornecer uma chave SSH p\u00fablica (veja o t\u00f3pico a seguir)</p>"},{"location":"ambiente-local/","title":"Configurando ambiente local","text":"<p>Para enviar comandos via SSH para a sua aplica\u00e7\u00e3o no servidor (veremos os comandos dispon\u00edveis mais adiante), fazer:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br &lt;COMANDO&gt; &lt;NOME_DA_APLICA\u00c7\u00c3O&gt;\n</code></pre> <ul> <li><code>-p 2299</code> indica que o comando deve ser reallizado no dom\u00ednio app.ic.ufba.br na porta 2299;</li> <li><code>-t</code> indica que o SSH requer um psudoterminal para execu\u00e7\u00e3o de comandos shell (PTY). \u00c9 altamente recomendada a sua utiliza\u00e7\u00e3o.</li> </ul> <p>Para que n\u00e3o seja necess\u00e1rio executar todo esse comando a cada vez, podemos suprimir esses modificadores de porta e PTY, configurando um script em <code>~/.ssh/config</code> inserindo as seguintes linhas de comando:</p> <pre><code>Host app.ic.ufba.br 200.128.51.122\n  HostName 200.128.51.122\n  Port 2299\n  User dokku\n  IdentityFile ~/.ssh/dokku\n  RequestTTY yes\n</code></pre> <p>Desta forma, podemos agora executar os comandos suprimindo esses modificadores:</p> <pre><code>$ ssh dokku@app.ic.ufba.br &lt;COMANDO&gt; &lt;NOME_DA_APLICA\u00c7\u00c3O&gt;\n</code></pre>"},{"location":"chave-ssh/","title":"Gerando chave SSH","text":"<p>A autentica\u00e7\u00e3o no servidor de aplica\u00e7\u00f5es se d\u00e1 atrav\u00e9s de uma chave SSH.</p>"},{"location":"chave-ssh/#procedimento-a-ser-realizado-na-maquina-local-do-usuario","title":"Procedimento a ser realizado na m\u00e1quina local do usu\u00e1rio","text":"<p>No dispositivo do usu\u00e1rio, verificar a exist\u00eancia da chave \"id_rsa.pub\":</p> <pre><code>$ ls -al ~/.ssh\n</code></pre> <p>Caso o usu\u00e1rio n\u00e3o tenha a chave, precisa-se gerar uma nova:</p> <pre><code>$ ssh-keygen -t rsa\n</code></pre> <p>Basta apertar \"Enter\" nas requisi\u00e7\u00f5es que aparecem, sem inserir password, que a chave ser\u00e1 gerada conforme a imagem a seguir:</p> <p></p> <p>Listando novamente, agora devemos ter o seguinte resultado:</p> <p></p> <p>Agora o usu\u00e1rio deve gerar a string da chave:</p> <pre><code>$ cat ~/.ssh/id_rsa.pub \n</code></pre> <p></p> <p>O usu\u00e1rio deve copiar a string gerada e disponibilizar para o administrador do servidor Dokku realizar a inclus\u00e3o deste no sistema.</p> <p>Obs.: Obviamente, a string gerada ser\u00e1 diferente em outra m\u00e1quina.</p>"},{"location":"comandos-permitidos/","title":"Comandos dispon\u00edveis","text":"<p>Para acessar/manipular a sua aplica\u00e7\u00e3o no servidor/container, seguem alguns comandos \u00fateis permitidos para serem executados via SSH. Comando a ser executado precisa necessariamente seguir esse padr\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br &lt;COMANDO&gt; &lt;NOME_DA_APLICA\u00c7\u00c3O&gt;\n</code></pre> <p>Lembramos que conforme explicitado no t\u00f3pico configurando ambiente local, podemos suprimir os modificadores <code>-t</code> e <code>-p 2299</code>. Fica a crit\u00e9rio do usu\u00e1rio.</p>"},{"location":"comandos-permitidos/#comandos-permitidos","title":"Comandos permitidos:","text":""},{"location":"comandos-permitidos/#comandos-para-banco-de-dados","title":"Comandos para banco de dados:","text":"<ul> <li><code>postgres:expose</code></li> </ul> <p>Este exemplo acima foi feito com comando de banco de dados postgreSQL, mas poderia ser outro. O comando exp\u00f5e o banco de dados presente no container Docker \u00e0 uma porta para acesso externo ao processo. Isso \u00e9 \u00fatil para realizar consultas no banco, backups e afins. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br postgres:expose teste\n</code></pre> <p>Nesse momento, o servidor retornar\u00e1 em quais portas o servi\u00e7o est\u00e1 exposto/dispon\u00edvel para acesso. Pode-se tamb\u00e9m expor o banco de dados a uma porta espec\u00edfica. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br postgres:expose teste 9000\n</code></pre> <ul> <li><code>postgres:unexpose</code></li> </ul> <p>Este comando desfaz a configura\u00e7\u00e3o anterior. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br postgres:unexpose teste\n</code></pre> <ul> <li><code>postgres:export</code></li> </ul> <p>Este comando far\u00e1 um backup do banco de dados da aplica\u00e7\u00e3o na m\u00e1quina local. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br postgres:export [DB_NAME] &gt; [DB_NAME].dump\n</code></pre> <p>Obs.: O arquivo <code>.dump</code> ser\u00e1 gerado na pasta local onde foi rodado o comando <code>export</code>.</p> <ul> <li><code>postgres:import</code></li> </ul> <p>Esse comando far\u00e1 a importa\u00e7\u00e3o de um banco de dados externo para o container da aplica\u00e7\u00e3o no servidor. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br postgres:import [DB_NAME] &lt; [DB_NAME].dump\n</code></pre> <ul> <li><code>postgres:destroy</code></li> </ul> <p>Esse comando desvincula o banco de dados da aplica\u00e7\u00e3o do usu\u00e1rio e apaga o banco. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br postgres:destroy [NOME_DB]\n</code></pre> <p>Observa\u00e7\u00e3o importante: Caso o usu\u00e1rio precise por qualquer motivo, destruir o banco de dados, ter\u00e1 que entrar em contato novamente com o suporteIC para a recria\u00e7\u00e3o de novo banco de dados no container. Nesse caso, o usu\u00e1rio ter\u00e1 que fazer a importa\u00e7\u00e3o de um backup dentro do container com o comando <code>postgres:import</code>.  </p> <ul> <li><code>postgres:connect</code></li> </ul> <p>Esse comando permite que o usu\u00e1rio se conecte diretamente ao banco de dados da aplica\u00e7\u00e3o, sendo poss\u00edvel executar os comandos SQL necess\u00e1rios para altera\u00e7\u00f5es e/ou consultas caso deseje:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br postgres:connect [NOME_DB]\n</code></pre> <ul> <li><code>postgres:info</code></li> </ul> <p>Esse comando permite ler as configura\u00e7\u00f5es da instala\u00e7\u00e3o do banco de dados da aplica\u00e7\u00e3o. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br postgres:info [NOME_DB]\n</code></pre> <p>Exemplo de sa\u00edda com o banco de dados da aplica\u00e7\u00e3o \"teste\":</p> <pre><code>=====&gt; teste_production postgres service information\n       Config dir:          /var/lib/dokku/services/postgres/teste_production/data\n       Config options:                               \n       Data dir:            /var/lib/dokku/services/postgres/teste_production/data\n       Dsn:                 postgres://postgres:4d289d66a5617ca55a696ab70eea145f@dokku-postgres-teste-production:5432/teste_production\n       Exposed ports:       5432-&gt;9050               \n       Id:                  f5868b071be41ec552885a103f0181891a0aef3f6613fbded99bd08412957568\n       Internal ip:         172.17.0.4               \n       Links:               teste                    \n       Service root:        /var/lib/dokku/services/postgres/teste_production\n       Status:              running                  \n       Version:             postgres:14.5 \n</code></pre>"},{"location":"comandos-permitidos/#comandos-dokku","title":"Comandos dokku","text":"<ul> <li><code>run</code></li> </ul> <p>O comando <code>run</code> pode ser usado para executar um processo \u00fanico para um comando espec\u00edfico. Isso iniciar\u00e1 um novo container e executar\u00e1 o comando desejado dentro desse container. A imagem do container ser\u00e1 a mesma imagem do container usada para iniciar o aplicativo atualmente implantado. Exemplo de execu\u00e7\u00e3o de listagem detalhada de arquivos de uma aplica\u00e7\u00e3o: </p> <pre><code># roda `ls -lah` no diret\u00f3rio `/app` da aplica\u00e7\u00e3o `teste`\n$ ssh -t -p 2299 dokku@app.ic.ufba.br run teste ls -lah\n</code></pre> <p>Obs.: Observe que nos caso do comando <code>run</code>, o nome da aplica\u00e7\u00e3o precisa vir ANTES do comando que se quer rodar.</p> <ul> <li><code>logs</code></li> </ul> <p>Exibe os logs da aplica\u00e7\u00e3o. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br logs teste\n</code></pre> <ul> <li><code>urls</code></li> </ul> <p>Exibe as urls vinculadas \u00e0 aplica\u00e7\u00e3o. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br urls teste\n</code></pre> <p>Obs.: Decartar a usabilidade da url com schema http. Somente as requisi\u00e7\u00f5es https ir\u00e3o funcionar por motivos de seguran\u00e7a. </p> <ul> <li><code>apps:destroy</code></li> </ul> <p>Comando que desvincula a aplica\u00e7\u00e3o do seu banco de dados associado e a apaga do servidor. Ap\u00f3s a execu\u00e7\u00e3o do comando, o sistema exigir\u00e1 que escrevamos exatamente o nome da aplica\u00e7\u00e3o para confirma\u00e7\u00e3o da destrui\u00e7\u00e3o. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br apps:destroy teste\n</code></pre> <p>Obs.: O banco de dados n\u00e3o morre junto com a aplica\u00e7\u00e3o. Para destru\u00ed-lo, vejamos um exemplo com um banco de dados postgresSQL:</p> <p>Observa\u00e7\u00e3o importante: Caso o usu\u00e1rio precise por qualquer motivo, destruir a aplica\u00e7\u00e3o, ter\u00e1 que entrar em contato novamente com o suporteIC para a recria\u00e7\u00e3o de nova aplica\u00e7\u00e3o no container. Nesse caso, o usu\u00e1rio ter\u00e1 que fazer novamente o deploy da aplica\u00e7\u00e3o com o comando <code>git push -f dokku master</code>. </p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br postgres:destroy teste_db\n</code></pre> <p>Da mesma forma como para os apps, o sistema exigir\u00e1 confirma\u00e7\u00e3o de seguran\u00e7a antes de proceder.</p> <ul> <li><code>builder:set</code> </li> </ul> <p>Configura o modo de constru\u00e7\u00e3o(build) conforme visto no t\u00f3pico configurando o modo de constru\u00e7\u00e3o</p> <ul> <li><code>config:show</code></li> </ul> <p>Exibe as configura\u00e7\u00f5es da aplica\u00e7\u00e3o no container Docker, bem como as vari\u00e1veis de ambiente. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br config:show teste\n</code></pre> <p>Sa\u00edda do comando:</p> <pre><code>=====&gt; teste env vars\nDATABASE_URL:          postgres://postgres:4d289d66a5617ca55a696ab70eea145f@dokku-postgres-teste-production:5432/teste_production\nDOKKU_APP_PROXY_TYPE:  nginx\nDOKKU_APP_RESTORE:     1\nDOKKU_APP_TYPE:        herokuish\nDOKKU_PROXY_PORT:      80\nDOKKU_PROXY_PORT_MAP:  http:80:5000 https:443:5000\nDOKKU_PROXY_SSL_PORT:  443\nGIT_REV:               50b80751d267c9202ca34775b81ff3edd7b45f2c\n\n</code></pre> <ul> <li><code>config:set</code></li> </ul> <p>Comando para configura\u00e7\u00e3o das vari\u00e1veis de ambiente conforme j\u00e1 visto anteriormente. Exemplo de execu\u00e7\u00e3o para configura\u00e7\u00e3o de duas vari\u00e1veis:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br config:set &lt;NOME_DA_APLICA\u00c7\u00c3O&gt; VAR1=\"valor\\ 1\" VAR2=\"valor\\ 2\"\n</code></pre> <p>Exemplo de execu\u00e7\u00e3o em base64:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br config:set --encoded &lt;NOME_DA_APLICA\u00c7\u00c3O&gt; KEY=\"$(base64 ~/.ssh/id_rsa)\n</code></pre> <ul> <li><code>enter &lt;NOME_DA_APLICA\u00c7\u00c3O&gt;</code></li> </ul> <p>Este comando permite rodar comandos em um container em execu\u00e7\u00e3o, muito \u00fatil para debug. Segue um exemplo simples com a aplica\u00e7\u00e3o <code>teste</code>, utilizando uma varia\u00e7\u00e3o do comando <code>enter</code>, no caso de teste, o processo <code>web</code>:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br enter teste web echo ol\u00e1 \n</code></pre> <p>Sa\u00edda do comando no terminal:</p> <pre><code>$ ol\u00e1 \n</code></pre> <p>Outras varia\u00e7\u00f5es de comando est\u00e3o dispon\u00edveis e podem ser vistas com mais detalhes na documenta\u00e7\u00e3o oficial - Entering Containers.</p> <p>Obs.: Os processos devem ser definidos no Procfile, caso a sua aplica\u00e7\u00e3o n\u00e3o utilize um dockerfile. Um exemplo de configura\u00e7\u00e3o de Procfile est\u00e1 definido no t\u00f3pico configurando o modo de constru\u00e7\u00e3o(build).  </p>"},{"location":"comandos-permitidos/#comandos-docker-containers","title":"Comandos Docker (containers)","text":"<ul> <li><code>ps:inspect</code></li> </ul> <p>Este comando reunir\u00e1 todos os IDs de container em execu\u00e7\u00e3o para seu aplicativo e chamar\u00e1 a inspe\u00e7\u00e3o do docker, limpando os dados de sa\u00edda para que possam ser copiados e colados em outro lugar com seguran\u00e7a. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br ps:inspect &lt;NOME_DA_APLICA\u00c7\u00c3O&gt; \n</code></pre> <ul> <li><code>ps:report</code></li> </ul> <p>Exibe um relat\u00f3rio de processo para um ou mais aplicativos. Exemplo de execu\u00e7\u00e3o com a aplica\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br ps:report &lt;NOME_DA_APLICA\u00c7\u00c3O&gt; \n</code></pre> <p>Exemplo de sa\u00edda com a aplica\u00e7\u00e3o \"teste\":</p> <pre><code>=====&gt; teste ps information\n       Deployed:                      true\n       Processes:                     1\n       Ps can scale:                  true\n       Ps computed procfile path:     Procfile\n       Ps global procfile path:       Procfile\n       Ps procfile path:              \n       Ps restart policy:             on-failure:10\n       Restore:                       true\n       Running:                       true\n       Status web 1:                  running (CID: 05850b537eb)\n</code></pre> <ul> <li><code>ps:start</code></li> </ul> <p>Inicializa a aplica\u00e7\u00e3o. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br ps:start &lt;NOME_DA_APLICA\u00c7\u00c3O&gt; \n</code></pre> <ul> <li><code>ps:stop</code></li> </ul> <p>Para a execu\u00e7\u00e3o de uma aplica\u00e7\u00e3o. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br ps:stop &lt;NOME_DA_APLICA\u00c7\u00c3O&gt; \n</code></pre> <ul> <li><code>ps:restart</code></li> </ul> <p>Reinicializa uma aplica\u00e7\u00e3o. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br ps:restart &lt;NOME_DA_APLICA\u00c7\u00c3O&gt; \n</code></pre> <ul> <li><code>ps:rebuild</code></li> </ul> <p>Reconstr\u00f3i o container Docker da aplica\u00e7\u00e3o. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br ps:rebuild &lt;NOME_DA_APLICA\u00c7\u00c3O&gt; \n</code></pre> <p>O Dokku tamb\u00e9m permite o agendamento de tarefas utilizando a ferramenta <code>cron</code>. Comandos permitidos:</p> <ul> <li><code>cron:list &lt;APP&gt;</code></li> </ul> <p>Listagem de tarefas agendadas para uma determinada aplica\u00e7\u00e3o. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br cron:list &lt;NOME_DA_APLICA\u00c7\u00c3O&gt; \n</code></pre> <ul> <li><code>cron:report &lt;APP&gt;</code></li> </ul> <p>Exibe um relat\u00f3rio de tarefas configuradas para uma aplica\u00e7\u00e3o. Exemplo de execu\u00e7\u00e3o:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br cron:report &lt;NOME_DA_APLICA\u00c7\u00c3O&gt; \n</code></pre> <p>Para mais informa\u00e7\u00f5es sobre como configurar um cron-job para sua aplica\u00e7\u00e3o, acesse a p\u00e1gina de agendamentos de tarefas na documenta\u00e7\u00e3o oficial - scheduled-cron-tasks.</p>"},{"location":"deploy/","title":"Realizando deploy","text":"<p>A partir do momento em que o usu\u00e1rio receber a notifica\u00e7\u00e3o de aptid\u00e3o por parte do suporte de TI do IC, este j\u00e1 poder\u00e1 realizar o deploy da sua aplica\u00e7\u00e3o atrav\u00e9s de comandos git seguindo os seguintes passos em sua m\u00e1quina local:</p> <ul> <li>Navegar at\u00e9 o reposit\u00f3rio Git da aplica\u00e7\u00e3o</li> <li>Adicionar um reposit\u00f3rio remoto com o comando: </li> </ul> <pre><code>$ git remote add dokku dokku@app.ic.ufba.br:&lt;NOME_DA_APLICA\u00c7\u00c3O&gt;\n</code></pre> <p>Troque <code>&lt;NOME_DA_APLICA\u00c7\u00c3O&gt;</code> pelo nome da sua aplica\u00e7\u00e3o (ou seja, o nome que vem antes de <code>app.ic.ufba.br</code> na URL de sua aplica\u00e7\u00e3o)</p> <p>Obs.: O reposit\u00f3rio remoto criado para push PRECISA se chamar \"dokku\". Caso contr\u00e1rio, o deploy sempre retornar\u00e1 uma falha. Isso \u00e9 uma exig\u00eancia do sistema.</p> <ul> <li>Realizar o deploy com o comando (O primeiro deploy precisa necessariamente utilizar o modificador -f no comanfo git): </li> </ul> <pre><code>$ git push -f dokku master\n</code></pre> <ul> <li>Ap\u00f3s o primeiro deploy, se houver necessidade de realizar outros, n\u00e3o \u00e9 mais necess\u00e1rio utilizar o modificador indicado acima. Pode-se fazer apenas: </li> </ul> <pre><code>$ git push dokku master\n</code></pre>"},{"location":"deploy/#porta-do-servico","title":"Porta do servi\u00e7o","text":"<p>Por padr\u00e3o, o Dokku tenta acessar a aplica\u00e7\u00e3o na porta 5000. Configure sua aplica\u00e7\u00e3o para executar nessa porta ou ent\u00e3o use os comandos <code>proxy:ports</code> para configurar o mapeamento das portas 80 (http) e 443 (https) para a porta usada pela sua aplica\u00e7\u00e3o.</p>"},{"location":"modo-build/","title":"Configurando o modo de constru\u00e7\u00e3o (build)","text":"<p>No Dokku, \u00e9 poss\u00edvel configurar o modo de build da sua aplica\u00e7\u00e3o. Esse \u00e9 o m\u00e9todo que ser\u00e1 utilizado pelo Dokku para implementa\u00e7\u00e3o da aplica\u00e7\u00e3o no container Docker no durante o deploy. Por padr\u00e3o, no momento do deploy, o Dokku utilizar o construtor herokuish, uma ferramenta open source do Heroku. Para selecionar o modo build, fazer:</p> <ul> <li>Build herokuish: </li> </ul> <pre><code>ssh -t -p 2299 dokku@app.ic.ufba.br builder:set &lt;APP&gt; selected herokuish\n</code></pre> <ul> <li>Build Dockerfile:</li> </ul> <pre><code>ssh -t -p 2299 dokku@app.ic.ufba.br builder:set &lt;APP&gt; selected dockerfile\n</code></pre> <p>Caso o usu\u00e1rio n\u00e3o possua um Dockerfile na sua aplica\u00e7\u00e3o, um Procfile precisa necessariamente ser criado na raiz da aplica\u00e7\u00e3o. Um exemplo de configura\u00e7\u00e3o simples e funcional pode ser configurado da seguinte forma:</p> <pre><code>web: bundle exec puma -C config/puma.rb       # Utiliza o puma como servi\u00e7o web\n# worker: bundle exec sidekiq -c 3            # Necess\u00e1rio caso o usu\u00e1rio queira definir um worker\nrelease: bin/rails db:migrate                 # configura\u00e7\u00e3o de migra\u00e7\u00e3o autom\u00e1tica do banco de dados no momento do deploy\n</code></pre> <p>Note que a linha <code>worker: bundle exec sidekiq -c 3</code> est\u00e1 comentada, pois \u00e9 para ser utilizada somente em caso de especifica\u00e7\u00e3o de worker, podendo ser omitida essa linha caso contr\u00e1rio. Nesse caso, utilizamos o <code>sidekiq</code> como exemplo. Na linha <code>release: bin/rails db:migrate</code> usamos o <code>rails</code> como exemplo por se tratar de um Procfile configurado para uma aplica\u00e7\u00e3o Ruby. Deve ser substitu\u00eddo pelo da sua aplica\u00e7\u00e3o.</p>"},{"location":"variaveis-de-ambiente/","title":"Configurando as vari\u00e1veis de ambiente","text":"<p>Normalmente, um aplicativo exigir\u00e1 alguma configura\u00e7\u00e3o para ser executado corretamente. O Dokku oferece suporte \u00e0 configura\u00e7\u00e3o de aplicativos por meio das vari\u00e1veis de ambiente. Essas vari\u00e1veis podem conter dados privados, como senhas ou chaves de API, por isso n\u00e3o \u00e9 recomend\u00e1vel armazen\u00e1-las no reposit\u00f3rio do seu aplicativo.</p> <p>Voc\u00ea pode definir v\u00e1rias vari\u00e1veis de ambiente de uma s\u00f3 vez:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br config:set &lt;NOME_DO_APP&gt; KEY=\"VALORES\\ COM\\ ESPA\u00c7OS\"\n</code></pre> <p>ou ainda:</p> <pre><code>ssh -t -p 2299 dokku@app.ic.ufba.br config:set sisfila VAR1=\"valor\\ 1\" VAR2=\"valor\\ 2\"\n</code></pre> <p>Dokku tamb\u00e9m pode ler valores codificados em base64. Essa \u00e9 a maneira mais f\u00e1cil de definir um valor com novas linhas ou espa\u00e7os. Para definir um valor com novas linhas, voc\u00ea precisa primeiro codific\u00e1-lo em base64 e passar o sinalizador <code>--encoded</code>:</p> <pre><code>$ ssh -t -p 2299 dokku@app.ic.ufba.br config:set --encoded &lt;NOME_DO_APP&gt; KEY=\"$(base64 ~/.ssh/id_rsa)\"\n</code></pre> <p>Obs.: <code>id_rsa</code> \u00e9 apenas um exemplo com o id SSH da sua m\u00e1quina local.</p> <p>Obs.1: Caso a sua aplica\u00e7\u00e3o n\u00e3o utilize vari\u00e1veis de ambiente, o Dokku utilizar\u00e1 a suas configura\u00e7\u00f5es globais para essa configura\u00e7\u00e3o.</p> <p>Obs.2: Lembramos que \u00e9 poss\u00edvel suprimir os modificadores <code>-t</code> e <code>-p 2299</code> conforme indicado no t\u00f3pico configurando ambiente local</p>"}]}